{"version":3,"sources":["logo.svg","actions/actionTypes.js","components/ShowTextComponent.js","actions/index.js","App.js","serviceWorker.js","sagas/Api.js","sagas/textSaga.js","sagas/index.js","reducers/textReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_TEXT","FETCH_TEXT","FETCH_TEXT_SUCCESS","FETCH_TEXT_FAIL","ADD_TEXT_SUCCESS","ShowTextComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quantity","setState","_this2","react_default","a","createElement","style","width","display","className","text","onChange","e","hanldeChangeQuantity","target","value","onClick","onFetchText","onAddText","textReducers","map","d","index","key","Component","connect","console","log","textReducer","dispatch","type","TYPE","fetchTextAction","addTextAction","App","src","logo","alt","components_ShowTextComponent","Boolean","window","location","hostname","match","getTextFromApi","addTextFromApi","response","data","regenerator_default","wrap","_context","prev","next","axios","get","concat","sent","abrupt","stop","_marked","_context2","_marked2","API","fetchTexts","addTexts","watchFetchTexts","watchAddTexts","action","put","t0","error","textSaga_marked","textSaga_marked2","_context3","takeLatest","_marked3","_context4","_marked4","rootSaga","all","fork","sagas_marked","arguments","length","undefined","toConsumableArray","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755e9dfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ADD_TEXT = 'ADD_TEXT'\nexport const FETCH_TEXT = 'FETCH_TEXT'\n\nexport const FETCH_TEXT_SUCCESS = 'FETCH_TEXT_SUCCESS'\nexport const FETCH_TEXT_FAIL = 'FETCH_TEXT_FAIL'\nexport const ADD_TEXT_SUCCESS = 'ADD_TEXT_SUCCESS'\nexport const ADD_TEXT_FAIL = 'ADD_TEXT_FAIL'\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchTextAction, addTextAction } from \"../actions\";\n\nclass ShowTextComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quantity: 1\n    };\n  }\n  hanldeChangeQuantity(quantity) {\n    this.setState({\n      quantity\n    });\n  }\n  render() {\n    // console.log(this.state.quantity);\n    const quantityFirtFetch = 1;\n    return (\n      <div style={{ width: \"50%\" }}>\n        <div style={{ display: \"flex\" }}>\n          <label>More quantity</label>\n          <input\n            className=\"input\"\n            text=\"text\"\n            onChange={e => this.hanldeChangeQuantity(e.target.value)}\n            value={this.state.quantity}\n          />\n        </div>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.props.onFetchText(quantityFirtFetch)}\n        >\n          fetch Text\n        </button>{\" \"}\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.props.onAddText(this.state.quantity)}\n        >\n          add Text\n        </button>\n        <hr />\n        <div>\n          {this.props.textReducers.map((d, index) => (\n            <p key={index}>{d}</p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    textReducers: state.textReducer\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchText: quantity => {\n      dispatch(fetchTextAction(quantity));\n    },\n    onAddText: quantity => {\n      dispatch(addTextAction(quantity));\n    }\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ShowTextComponent);\n","import * as TYPE from \"./actionTypes\";\n\n// Action send by person\nexport const addTextAction = quantity => {\n  return {\n    type: TYPE.ADD_TEXT,\n    quantity\n  };\n};\n\nexport const fetchTextAction = quantity => {\n  return {\n    type: TYPE.FETCH_TEXT,\n    quantity\n  };\n};\n\n// Action send by redux-saga\nexport const fetchTextSuccessAction = data => {\n  return {\n    type: TYPE.FETCH_TEXT_SUCCESS,\n    data\n  };\n};\n\nexport const fetchFailedAction = error => ({\n  type: TYPE.FETCH_TEXT_FAIL,\n  error\n});\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ShowTextComponent from './components/ShowTextComponent'\n\nfunction App() {\n  console.log('%c Cảm ơn bạn đã ủng hộ! nhớ ghé www.audiovyvy.com nghe kể truyện đêm khuya nhé ', 'background: #222; color: #bada55; font-size:40px');\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>What is Saga</h2>\n        <ShowTextComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nfunction* getTextFromApi(quantity) {\n  const response = yield axios.get(\n    `https://baconipsum.com/api/?type=all-meat&paras=${quantity}&start-with-lorem=1&format=array`\n  );\n  const { data } = response;\n  return data;\n}\n\nfunction* addTextFromApi(quantity) {\n  const response = yield axios.get(\n    `https://baconipsum.com/api/?type=all-meat&paras=${quantity}&start-with-lorem=1&format=array`\n  );\n  const { data } = response;\n  return data;\n}\n\nexport const API = {\n  getTextFromApi,\n  addTextFromApi\n};\n","import * as TYPE from \"../actions/actionTypes\";\n// saga effects\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport { API } from \"./Api\";\n\n/**\n * @put dispatch 1 action\n * takeLatest đợi 1 action mới nhất. ví dụ ta spam gửi 1 chục cái action 1 lúc nó chỉ lấy cái cuối cùng\n * */\n\nfunction* fetchTexts(action) {\n  const { quantity } = action;\n  console.log(action)\n\n  try {\n    const data = yield API.getTextFromApi(quantity);\n    yield put({ type: TYPE.FETCH_TEXT_SUCCESS, data: data });\n  } catch (error) {\n    yield put({ type: TYPE.FETCH_TEXT_FAIL, error });\n  }\n}\n\nfunction* addTexts(action) {\n  console.log(action)\n  const { quantity } = action;\n  try {\n    const data = yield API.addTextFromApi(quantity);\n    console.log(data)\n    yield put({ type: TYPE.ADD_TEXT_SUCCESS, data });\n  } catch (error) {}\n}\n\nexport function* watchFetchTexts() {\n  yield takeLatest(TYPE.FETCH_TEXT, fetchTexts);\n}\n\nexport function* watchAddTexts() {\n  yield takeLatest(TYPE.ADD_TEXT, addTexts);\n}\n","// eslint-disable-next-line\nimport { call, all, fork } from \"redux-saga/effects\";\nimport { watchFetchTexts, watchAddTexts } from \"./textSaga\";\n\n/**\n * call chạy 1 saga\n * all chạy nhiều saga cùng 1 thời điểm\n * fork non-blocking call có nghĩa khi gọi saga1 và gọi tiếp saga2. saga mới đang thực hiện mặc dù saga cũ cũng vẫn thực hiện\n */\n\nexport default function* rootSaga() {\n  // @\n  // yield call(watchFetchTexts);\n\n  // @\n  yield all([fork(watchFetchTexts), fork(watchAddTexts)]);\n\n  // @\n  //  yield fork(watchFetchTexts);\n  //  yield fork(watchAddTexts);\n\n}\n","import * as TYPE from \"../actions/actionTypes\";\n\nconst text = [];\nconst textReducers = (state = text, action) => {\n  switch (action.type) {\n    case TYPE.FETCH_TEXT_SUCCESS: {\n      return action.data;\n    }\n    case TYPE.FETCH_TEXT_FAIL: {\n      return [];\n    }\n    case TYPE.ADD_TEXT_SUCCESS: {\n      return [...state, ...action.data];\n    }\n    case TYPE.ADD_TEXT_FAIL: {\n      return state\n    }\n    default:\n      return state;\n  }\n};\n\nexport default textReducers;\n","import { combineReducers } from \"redux\";\nimport textReducer from \"./textReducer\";\n\nconst rootReducer = combineReducers({\n  textReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport rootReducer from \"../reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}