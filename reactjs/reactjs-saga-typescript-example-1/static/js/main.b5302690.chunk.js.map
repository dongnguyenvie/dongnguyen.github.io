{"version":3,"sources":["assets/icon/garbage.svg","_constant.ts","components/render/Images.tsx","components/page/Main.tsx","components/page/Bage.tsx","App.tsx","serviceWorker.ts","reducer/images.ts","reducer/index.ts","saga/images.tsx","saga/index.tsx","store/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","FETCH_IMAGES","Images","props","img","react","src","isLoading","thumbnailUrl","width","alt","connect","state","images","dispatch","fetchImage","type","TYPE","className","onClick","fallback","data","map","i","key","draggable","onDrag","e","console","log","concat","clientX","clientY","handlDrag","id","Bage","iconBage","height","App","react_default","a","createElement","page_Main","page_Bage","Boolean","window","location","hostname","match","stateDefault","current","combineReducers","arguments","length","undefined","action","payload","find","image","albumId","Object","objectSpread","toConsumableArray","watchFetch","changeStatus","regenerator_default","wrap","_context","prev","next","takeEvery","stop","_marked","rs","rawData","_context2","fetch","Math","random","sent","json","put","successFetch","fork","t0","failFetch","_marked2","_context3","delay","loadingStatus","_marked3","rootSaga","all","saga_marked","sagaMiddleware","createSagaMiddlewre","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5302690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/garbage.23fb6961.svg\";","export const TEXT_SUCCESS = \"TEXT_SUCCESS\";\nexport const TEXT_FAIL = \"TEXT_FAIL\";\nexport const LOADING_STATUS = \"LOADING_STATUS\";\nexport const DRAG_DROP = \"DRAG_DROP\";\nexport const SUCCESS = \"SUCCESS\";\nexport const FAIL = \"FAIL\";\nexport const FETCH_IMAGES = 'FETCH_IMAGES'\n","import * as React from 'react'\n\nexport default (props: any) => {\n  const { img } = props\n  return (\n    <img\n      src={\n        (!img.isLoading && img.thumbnailUrl) ||\n        'https://loading.io/spinners/ripple/index.ripple-radio-preloader.svg'\n      }\n      width=\"150\"\n      alt=\"nothing...\"\n    />\n  )\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport * as TYPE from '../../_constant'\nimport ImgLazy from '../render/Images'\nimport { StateImagesTypes } from '../../_interface'\n\ninterface Props {\n  images: StateImagesTypes\n  fetchImage(): void | undefined\n}\ninterface MapState {\n  images: StateImagesTypes\n}\ninterface MapDispatchFunc {\n  (params: { type: typeof TYPE.FETCH_IMAGES }): void\n}\n\nconst Main: React.FunctionComponent<Props> = (props: Props) => {\n  function handlDrag(e: any) {\n    console.log(`clientX: ${e.clientX}, clientY: ${e.clientY}`)\n  }\n  return (\n    <div className=\"App\">\n      <h1>Redux Saga using typeScript basic syntax </h1>\n      <button className=\"btn btn-primary\" onClick={() => props.fetchImage()}>\n        Add Image\n      </button>\n      <div className=\"list-image\">\n        <React.Suspense fallback={<div>Loading Componentâ€¦</div>}>\n          {props.images.data.map((img: any, i: number) => (\n            <span key={i} draggable={true} onDrag={e => handlDrag(e)}>\n              {<ImgLazy img={img} key={img.id} />}\n            </span>\n          ))}\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any): MapState => ({\n  images: state.images\n})\n\nconst mapDispatchToProps = (dispatch: MapDispatchFunc) => ({\n  fetchImage: (): void => {\n    dispatch({ type: TYPE.FETCH_IMAGES })\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Main)\n","import * as React from 'react'\nimport iconBage from '../../assets/icon/garbage.svg'\nconst Bage = () => {\n  return (\n    <div>\n      <img src={iconBage} width=\"100%\" height=\"auto\" alt=\"images\" />\n    </div>\n  )\n}\n\nexport default Bage\n","import React from \"react\";\nimport \"./App.css\";\nimport MainCP from './components/page/Main'\nimport BageCP from './components/page/Bage'\n// import FunctionCP from \"./components/example/FunctionComponent\";\n// import ClassCP from \"./components/example/ClassComponent\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"col-7\">\n        <MainCP/>\n      </div>\n      <div className=\"col-3\">\n        <BageCP/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as TYPE from '../_constant'\nimport { StateImagesTypes } from '../_interface'\n\nconst stateDefault: StateImagesTypes = {\n  current: '',\n  data: []\n}\n\nexport default (state: StateImagesTypes = stateDefault, action: any) => {\n  switch (action.type) {\n    case TYPE.LOADING_STATUS: {\n      console.log(action.payload)\n      const updateImage: any = state.data.find(\n        (image: any) =>\n          image.id === action.payload.id &&\n          image.albumId === action.payload.albumId\n      )\n      updateImage.isLoading = false\n      return {\n        ...state\n      }\n    }\n    case TYPE.SUCCESS:\n      return {\n        ...state,\n        data: [...state.data, action.payload]\n      }\n    case TYPE.FAIL:\n      return action.data\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport images from './images'\n\nexport default combineReducers({\n  images\n})\n","import { put, takeEvery, fork, delay } from 'redux-saga/effects'\nimport * as TYPE from '../_constant'\nimport { FetchImagesTypes, ImagesTypes } from '../_interface'\n\nexport function* watchFetch() {\n  yield takeEvery(TYPE.FETCH_IMAGES, fetchImage)\n}\n\nexport function* fetchImage() {\n  try {\n    const rs = yield fetch(\n      `https://jsonplaceholder.typicode.com/photos/${~~(Math.random() * 100)}`\n    )\n    const rawData = yield rs.json()\n    const data = { ...rawData }\n    yield put(\n      successFetch({\n        ...data,\n        isLoading: true\n      })\n    )\n    yield fork(changeStatus, { ...data, isLoading: false })\n  } catch (err) {\n    yield put(failFetch(null))\n  }\n}\n\nfunction* changeStatus(payload: ImagesTypes) {\n  yield delay(1000)\n  yield put(loadingStatus(payload))\n}\n\nconst loadingStatus = (payload: ImagesTypes): FetchImagesTypes => ({\n  type: TYPE.LOADING_STATUS,\n  payload\n})\n\nconst successFetch = (payload: ImagesTypes): FetchImagesTypes => ({\n  type: TYPE.SUCCESS,\n  payload\n})\n\nconst failFetch = (payload: null): FetchImagesTypes => ({\n  type: TYPE.FAIL,\n  payload\n})\n","import { all, fork } from 'redux-saga/effects'\nimport { watchFetch } from './images'\n\nexport default function* rootSaga() {\n  yield all([fork(watchFetch)])\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducer\";\nimport createSagaMiddlewre from 'redux-saga'\nimport rootSaga from '../saga'\n\nconst sagaMiddleware: any = createSagaMiddlewre()\n\nexport default createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga)\n","// import \"./global.tsx\";\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}